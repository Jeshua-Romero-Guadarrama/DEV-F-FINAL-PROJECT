openapi: 3.1.0
info:
  title: PawMatch API
  version: 1.0.0
  description: |
    API que impulsa la plataforma PawMatch. Incluye autenticación, catálogo de mascotas,
    pedidos de la tienda y formularios de guía de cuidados.
servers:
  - url: http://localhost:4000/api/v1
    description: Servidor local de desarrollo
paths:
  /health:
    get:
      summary: Estado de la API
      description: Devuelve el estado de salud del servicio.
      responses:
        '200':
          description: Respuesta exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
  /auth/register:
    post:
      summary: Registro de usuarios
      description: Crea una cuenta nueva y devuelve token JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        '201':
          description: Usuario registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: El correo ya está registrado
  /auth/login:
    post:
      summary: Inicio de sesión
      description: Devuelve datos del usuario autenticado y token JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: Sesión iniciada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Credenciales incorrectas
  /auth/profile:
    get:
      summary: Perfil de usuario
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil autenticado
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
  /pets:
    get:
      summary: Listado de mascotas
      parameters:
        - name: tipo
          in: query
          schema:
            type: string
            enum: [perro, gato, otro]
        - name: estado
          in: query
          schema:
            type: string
            enum: [disponible, reservado, adoptado]
      responses:
        '200':
          description: Lista de mascotas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
  /pets/{id}:
    get:
      summary: Detalle de mascota
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Mascota encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Mascota no encontrada
  /pets/seeds:
    get:
      summary: Ejemplos de mascotas
      description: Devuelve mascotas de muestra para entornos sin datos.
      responses:
        '200':
          description: Lista de ejemplos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
  /products:
    get:
      summary: Catálogo de productos
      parameters:
        - name: categoria
          in: query
          schema:
            type: string
        - name: activo
          in: query
          schema:
            type: string
            enum: [true, false]
      responses:
        '200':
          description: Productos disponibles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /orders:
    post:
      summary: Crear pedido
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '201':
          description: Pedido creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    get:
      summary: Listar pedidos (solo administradores)
      security:
        - bearerAuth: []
      parameters:
        - name: estado
          in: query
          schema:
            type: string
            enum: [pendiente, pagado, enviado, entregado, cancelado]
      responses:
        '200':
          description: Pedidos encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '403':
          description: Acceso denegado
  /leads:
    post:
      summary: Registrar lead de guía de cuidados
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeadInput'
      responses:
        '201':
          description: Lead creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lead'
    get:
      summary: Listar leads (solo administradores)
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Leads encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lead'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 64f1c2a1b0e8f12c3d4e5f67
        nombre:
          type: string
        email:
          type: string
          format: email
        rol:
          type: string
          enum: [admin, voluntario, adoptante]
    RegisterInput:
      type: object
      required: [nombre, email, password]
      properties:
        nombre:
          type: string
          example: Ana Pérez
        email:
          type: string
          example: ana@example.com
        password:
          type: string
          format: password
        telefono:
          type: string
    LoginInput:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          example: ana@example.com
        password:
          type: string
          format: password
          example: "TuClave123"
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: Token JWT
    Pet:
      type: object
      properties:
        id:
          type: string
        nombre:
          type: string
        tipo:
          type: string
        raza:
          type: string
        edad:
          type: string
        sexo:
          type: string
        descripcion:
          type: string
        foto:
          type: string
          format: uri
    Product:
      type: object
      properties:
        id:
          type: string
        nombre:
          type: string
        descripcion:
          type: string
        categoria:
          type: string
        precio:
          type: number
          format: float
        activo:
          type: boolean
    OrderInput:
      type: object
      required: [items, total]
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              producto:
                type: string
              cantidad:
                type: integer
              precioUnitario:
                type: number
        total:
          type: number
          format: float
    Order:
      allOf:
        - $ref: '#/components/schemas/OrderInput'
        - type: object
          properties:
            id:
              type: string
            estado:
              type: string
    LeadInput:
      type: object
      required: [nombre, apellido, email, edad, lada, telefono, aceptoTerminos]
      properties:
        nombre:
          type: string
        apellido:
          type: string
        email:
          type: string
        edad:
          type: integer
        lada:
          type: string
        telefono:
          type: string
        perros:
          type: integer
        gatos:
          type: integer
        aceptoTerminos:
          type: boolean
    Lead:
      allOf:
        - $ref: '#/components/schemas/LeadInput'
        - type: object
          properties:
            id:
              type: string
            createdAt:
              type: string
              format: date-time